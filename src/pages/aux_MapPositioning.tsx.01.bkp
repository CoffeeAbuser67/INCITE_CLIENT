// HERE MapMenu
import React, {
    useState,
    useRef,
    useEffect,
    useMemo,
} from "react";

import {
    useSpring,
    useTransition,
    animated,

} from "@react-spring/web";

import {
    Blockquote,
    Box,
    Card,
    Heading,
    Separator,
} from "@radix-ui/themes";

import classNames from "classnames";

import { mapStore } from "../store/mapsStore";


import regionCityData from "../assets/BahiaRegiaoMuni.json";
import regionData from "../assets/BahiaRegiao.json";


// . . . . . . .

interface Region {
    id: string;
    d: string;
    name: string;
}

interface RegionCity {
    [key: string]: Region[];
}

interface BoundingBox {
    x: number;
    y: number;
    width: number;
    height: number;
}

// [●] mapRegionCity
const mapRegionCity: RegionCity = regionCityData;

// [●] mapRegion
const mapRegion: Region[] = regionData;


const MapMenu = () => { // ★ MapMenu  ⋙── ── ── ── ── ── ── ── ── ── ── ── ── ── ── ──➤
    const svgRef = useRef<SVGSVGElement | null>(null); // HERE svgRef
    const c1Ref = useRef<SVGCircleElement | null>(null); // HERE c1Ref
    const originalBBoxRef = useRef<BoundingBox | null>(null); // HERE originalBBoxRef


    type levels = 0 | 1;
    // ✳ [currentLevel, setCurrentLevel]
    const [currentLevel, setCurrentLevel] = useState<levels>(0);

    // ✳ { region, city, setRegion, setCity } 
    const { region, city, setRegion, setCity } = mapStore();



    // const [rect, setRect] = useState<DOMRect | null>(null);
    // const [bbox, setBbox] = useState<DOMRect | null>(null);

    // ✳ [crabPos, setCrabPos]
    const [crabPos, setCrabPos] = useState({ X: 300, Y: 300 }); // ── ⋙── ── ── ── ── ── ──➤

    useEffect(() => { //HERE uE
        if (svgRef.current && !originalBBoxRef.current) {
            // Assign the value from getBBox to the ref
            originalBBoxRef.current = svgRef.current.getBBox();
            console.log("Original BBox:", originalBBoxRef.current);
        }
    }, []); // . . . . . . .


    // ✪ transition
    const transition = useTransition(mapRegionCity[region.active] || [], {
        trail: 600 / mapRegionCity[region.active].length || 1,
        from: { opacity: 0, transform: "scale(0)" },
        enter: { opacity: 1, transform: "scale(1)" },
        leave: { opacity: 0, transform: "scale(0)" },
        config: { mass: 10, tension: 63, friction: 16, clamp: true },
        keys: (mapRegionCity[region.active] || []).map((el) => el.id),
    });
    // ✪ springStyles
    const [springStyles, api] = useSpring(() => ({
        transform: `scale(1) translate(0px, 0px)`,
        config: { tension: 62, friction: 35, mass: 7 },
    }));


    // {✪} resetMap
    const resetMap = () => {
        setCurrentLevel(0); // ↺ setCurrentLevel
        setRegion("bahia", "Bahia"); // ↺ setRegion
        setCity("", ""); // ↺ setCity

        api.start({
            transform: "scale(1) translate(0px, 0px)",
        });
    }; // ── ⋙── ── ── ── ── ── ──➤

    // <✪> runToFit
    const runToFit = (bbox: BoundingBox, rect: BoundingBox) => {
        const svgRect = svgRef.current?.getBoundingClientRect();
        // const svgBox = svgRef.current?.getBBox()
        const svgBox = originalBBoxRef.current; // get the cached svg bbox value

        if (!svgRect || !svgBox) return;

        const CBX = bbox.x + bbox.width / 2;
        const CBY = bbox.y + bbox.height / 2;

        const SVGCX = svgBox.width / 2;
        const SVGCY = svgBox.height / 2;

        // {●} translate
        // + 5 is the offset from the edge of the canvas
        const translateX = SVGCX - CBX + 5;
        const translateY = SVGCY - CBY + 5;

        // {●} Scale
        const scaleX = svgRect.width / rect.width;
        const scaleY = svgRect.height / rect.height;
        const maxScale = Math.min(scaleX, scaleY);


        const SCALE_ADJUSTMENT = 0.35
        setCrabPos({ X: CBX, Y: CBY }); // ↺ setCrabPos


        api.start({
            transform: `scale(${maxScale - SCALE_ADJUSTMENT
                }) translate(${translateX}px, ${translateY}px)`,
        });
    }; // ── ⋙── ── ── ── ── ── ──➤

    // <✪> handleClick
    const handleClick = (event) => {
        const target = event.target;
        const target_id = target?.id;
        const target_type = target?.getAttribute("data-type");
        const target_name = target?.getAttribute("data-name");

        // [LOG] target
        // console.log("target:", target);
        console.log("target id:", target_id);
        console.log("target type:", target_type);
        console.log("target name:", target_name);
        console.log("level:", currentLevel);
        console.log("✦────────────────────────────➤");

        // . . .
        // ⊙ currentLevel 0
        if (currentLevel === 0) {
            if (target_type === "region") {
                setCurrentLevel(1); // ↺ setCurrentLevel
                setRegion(target_id, target_name);  // ↺ setRegion
                runToFit(target.getBBox(), target.getBoundingClientRect()); // {○} runToFit
            }
        } // . . .

        // ⊙ currentLevel 1
        else if (currentLevel === 1) {
            if (target_type === "city") {
                setCurrentLevel(1); // ↺ setCurrentLevel
                setCity(target_id, target_name) // ↺ setCity
                // runToFit(target.getBBox(), target.getBoundingClientRect()); // {○} runToFit
                console.log(target_id, "↯"); // [LOG] target_id  ↯
            } else {
                resetMap(); // {○} resetMap
            }
        }
    }  // ── ⋙── ── ── ── ── ── ── ──➤

    // [✪] memoizedRegions 
    const memoizedRegions = useMemo(() => {

        return mapRegion.map((el, i) => {

            return (
                <g key={i} className={classNames("cls-region")}>
                    <title>{el.name}</title>
                    <animated.path
                        id={el.id}
                        d={el.d}
                        data-name={el.name}
                        data-type="region"
                        className="path-hover"
                    />
                </g>
            );
        });
    }, []);


    return (
        // ── ◯─◡◠◡◠◡◠◡◠ DOM ◡◠◡◠◡◠─⫸ 🌑
        <>
            <div
                className="flex flex-col gap-10 w-full h-full items-center justify-center my-60 pb-60"
            >

                <Card
                    //── ⋙── ── REGION_info ── ──➤
                    id='REGION_info'// HERE REGION_info
                    variant="ghost"
                    className={classNames(
                        "flex flex-col flex-1 justify-start items-start gap-3 w-full h-full bg-white opacity-95"
                    )}
                >

                    <Heading weight="bold" size="8" highContrast>
                        {region.name ? region.name : "Escolha uma região ou município para começar!"}
                    </Heading>

                    <Separator my='4' color="bronze" size="4" />

                    <Blockquote size="8" highContrast>
                        {city.name}
                    </Blockquote>

                </Card>

                <div className=" flex flex-col">

                    <div //── ⋙── ── canvas-wrapper ── ──➤
                        id="canvas-wrapper"
                        className="relative bg-red-950 rounded-3xl"
                        style={{
                            width: "715px",
                            height: "760px",
                            overflow: "hidden",
                            // border: "1px solid black",
                        }}
                    >

                        <animated.svg // . . . SVGCanvas
                            id="SVGCanvas"
                            ref={svgRef}
                            viewBox="0 0 715 760"
                            overflow={"visible"}
                            style={{
                                width: "100%",
                                height: "100%",
                                ...springStyles, // ○ springStyles
                            }}
                            // (○) handleClick
                            onClick={handleClick}
                        >
                            <g>
                                <defs>
                                    <style>
                                        {
                                            ".cls-region{stroke:#000;stroke-linejoin:round;stroke-width:.8px}"
                                        }
                                        {
                                            ".cls-city{stroke:#000;stroke-linejoin:round;stroke-width:.5px}"
                                        }
                                    </style>
                                </defs>


                                { // [○] memoizedRegions
                                    memoizedRegions
                                }

                                {currentLevel === 1 && (
                                    // . . . . . . .
                                    // HERE Overlay
                                    <rect
                                        opacity={0.95}
                                        x={-2000}
                                        y={-2000}
                                        width="4000"
                                        height="4000"
                                        fill="white"
                                    />
                                )}

                                {transition((style, cityItem) => { // ○ transition
                                    // . . . . . . .
                                    // [○] mapRegionCity 

                                    return (
                                        <animated.g {...style}>
                                            <title>{cityItem.name}</title>
                                            <animated.path
                                                id={cityItem.id}
                                                d={cityItem.d}
                                                data-name={cityItem.name}
                                                data-type="city"
                                                className={classNames(
                                                    "path-hover",
                                                    "cls-city",

                                                )}
                                            />
                                        </animated.g>
                                    );
                                })}

                            </g>

                            <circle // . . . . . . .
                                // HERE c1Ref 🦀
                                id="🦀"
                                ref={c1Ref}
                                cx={30}
                                cy={30}
                                r={12}
                                className="fill-lime-950"
                                transform={`translate(${crabPos.X}, ${crabPos.Y})`}
                            />
                        </animated.svg>
                    </div>

                </div>


            </div>
        </>
    );
};
export default MapMenu;
// ★ ⋙── ── ── ── ── ── ── ── ── ── ── ── ── ── ── ── ── ──➤
