
import { Tooltip, Text } from '@radix-ui/themes';
// Importe os hooks e componentes da react-spring
import { useSpring, animated } from 'react-spring';

// Componente para a parte visual do pino (para não repetirmos o código)
const PinVisual = ({ imageUrl }) => {
    const pinPath = "M16,0C7.163,0,0,7.163,0,16c0,2.833,0.761,5.734,2,8.219l14,15.781l14-15.781c1.239-2.485,2-5.385,2-8.219C32,7.163,24.837,0,16,0z";
    const logoSize = 30;
    const pinWidth = 32;

    return (
        <>
            <path d={pinPath} fill="rgba(0,0,0,0.2)" transform="translate(1, 1)" />

            <path d={pinPath} fill="#FFFFFF" stroke="#000000" strokeWidth="1" />

            <image
                href={imageUrl}
                x={(pinWidth - logoSize) / 2}
                y={(pinWidth - logoSize) / 2}
                height={logoSize}
                width={logoSize}
                clipPath="circle(50%)"
            />
        </>
    );
};

export const AnimatedLogoMarker = ({ x, y, imageUrl, onClick, tooltipContent }) => {
    const pinWidth = 32;
    const pinHeight = 40;

    // ▼▼▼ AQUI ESTÁ A CORREÇÃO PRINCIPAL ▼▼▼
    const [springProps, api] = useSpring(() => ({
        // O transform agora inclui a centralização E a animação
        transform: `translate(${-pinWidth / 2}px, ${-pinHeight}px) scale(1)`,
        config: { tension: 300, friction: 15 },
    }));

    const handleMouseEnter = () => {
        // No hover, mantemos a centralização e adicionamos o "lift" e o scale
        api.start({ transform: `translate(${-pinWidth / 2}px, ${-pinHeight - 4}px) scale(1.1)` });
    };

    const handleMouseLeave = () => {
        // No mouse leave, voltamos ao estado original (apenas centralizado)
        api.start({ transform: `translate(${-pinWidth / 2}px, ${-pinHeight}px) scale(1)` });
    };

    return (
        <Tooltip content={tooltipContent}>
            {/* Este grupo <g> só tem UMA responsabilidade: mover o sistema de coordenadas
        para o ponto (x, y) exato no mapa.
      */}
            <g transform={`translate(${x}, ${y})`}>
                {/*
          Esta <animated.g> aplica a transformação da react-spring.
          Ela começa já centralizada e se anima a partir daí.
        */}
                <animated.g style={springProps}>
                    <PinVisual imageUrl={imageUrl} />
                </animated.g>

                {/* O hitbox invisível. Sua posição é relativa ao ponto (x, y),
          por isso ele também precisa ser centralizado para cobrir o pino.
        */}
                <rect
                    x={-pinWidth / 2}
                    y={-pinHeight}
                    width={pinWidth}
                    height={pinHeight}
                    fill="transparent"
                    style={{ cursor: 'pointer' }}
                    onClick={onClick}
                    onMouseEnter={handleMouseEnter}
                    onMouseLeave={handleMouseLeave}
                />
            </g>
        </Tooltip>
    );
};